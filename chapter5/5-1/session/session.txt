セッションについて
「購入した商品の情報を常に保持し続けている」
アクセスするクライアントを特定し、それぞれのクライアントごとに
購入した商品の情報をずっと保管し続けている。
これはクッキーでは難しい。またクッキーでは大きなデータを
保管できない。またクッキーはブラウザに保管しているので、
利用者なぢが内容を改変できてしまう。

クライアントごとに情報を保管し続けるには、
「セッション」と呼ばれる機能を使う。

セッションは、クライアントごとに値を保管するための仕組み。
これは、クッキーの機能とサーバー側のプログラムを組み合わせたもの。
サーバーにアクセスしたクライアントには、それぞれ児湯のセッションIDが
クッキーに保存される。そして、各セッションIDごとに、サーバー側でデータを保管しておく。

こうすると、データそのものはサーバー側で保管しているのでどんなデータでも
保管しておくことができる。

Expressにはセッション機能実現するモジュールが容易されている

Express Sessionを利用する


npm install --save express-session
※アプリケーションフォルダでインストールする

Expressでは、様々なモジュールをロードして使うが、
こうしたモジュールをapp.useで利用するための分は、
上記のように「routes」フォルダのスクリプトをルーティングに割り付けるための
app.useより前に用意するように注意すること。

require('express-session');でExpress Sessionをロードしている。
そして、セッションのオプション設定の値を変数session_optに用意している。

secret:'keyboard cat'
秘密キーとなるテキスト。
セッションIDなどで「ハッシュ」と呼ばれる計算をするときのキーとなるもの。
現在の値はデフォルト値。

reserve:false
セッションストアと呼ばれるところに強制的に値を保存するためのもの。

saveUninitialized:false
初期化されていない値を強制的に保存するためのもの。

cookie:{maxAge:60*60*1000}
セッションIDを保管するクッキーに関する設定。
ここではmaxAgeという値で、クッキーの保管時間を1時間に設定している。
つまり最後のアクセスから1時間はセッションが保たれる。

セッションは、reqオブジェクトの「session」というプロパティにオブジェクトが
保管されている。ここに保存したい名前のプロパティを指定して値を入れれば、
そのまま保管される。
ここではmessageというプロパティに値を保管している。

sessionの利用は、「req.sessionに適当にプロパティを指定して値を保管し、それを取り出す」というだけ。

このセッションに保管された値は、自分だけに割り当てられているもの。
ほかのクライアントに値の情報がもれることはない。
