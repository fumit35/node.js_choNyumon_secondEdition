Wewbサイトからデータを取得する
Ajaxは、自サイトでなければアクセスできません。
クライアント側の１JavaScriptは、そのスクリプトが
ロードされたサイトにのみアクセスできるようになっている。

サーバーに設置したプログラムからは、ほかのサーバーにアクセスしてデータを
取り出すことができる。
外部のサイトからデータを取り出す場合は、「取り出したデータをどうりようするか」も考えないといけません。
普通のWebページはHTMLなので、アクセスしてもただのHTMLのソースコードが得られるだけ。
そこから必要な情報を取り出すのはかなり大変。

･指定のWebサイトにアクセスし、データを取りすネットワークアクセス機能。
これは、HTTP,HTTPsといったモジュールがExpressには用意されているので、
これらを利用する。

･XMLデータをパースしてJavaScriptのオブジェクトにする機能。
これは「XML2JS」というモジュールを使う。

npm install --save xml2js

RSS取得の流れを整理する
var http = require('https');
var parseString = require('xml2js').parseString
今まで、モジュールは基本的にapp.jsでロードしていた。
これまでのモジュールは、セッションのようにアプリケーション全体で利用するものだったため
app.jsに用意しておくのが自然。今回は、この/hello内でのみ使うものなので、
hello.jsに用意しておく。

ここでは、「https」「xml2js」とモジュールを指定いる。
Webサイトへのアクセスは、httpとhttpsという2つのものが用意されている。
今回は、HTTPSを使ってアクセスするので、httpsモジュールをロードする。
普通にHTTPアクセスをする場合は、httpモジュールを使う。

サイトへのアクセス
サイトへのアクセスはhttpの「get」メソッドで行う。

http.get(オプション設定,コールバック関数);
第一引数にはアクセスに関するオプション設定をまとめたオブジェクト、
第二引数にはコールバック関数を引数に指定して実行する。
getは、第一引数の情報を元にアクセスを開始し、GET終了時に第二引数のコールバック関数を呼び出す。

var opt = {
    host:'news.google.com'.
    port:443,
    path:'/news?h1=ja&ned=us&ie=UTF-8&oe=UTF-8&output=rss'
};
http.get(opt,(res2)=>{･･･略･･･})
オプション設定には、「host」「port」「path」と3つの値が用意されている。
これらはそれぞれ「アクセスするホスト(ドメイン)」「ポート番号」「パス（ドメイン以降の部分）」
ポート番号は、普通のHTTPアクセスならば80番ですが、HTTPSの場合は443番になる。

responseのイベント処理
http.getのコールバック関数では、responseオブジェクトが引数に渡される。
このresponseに、データを取得した際のイベントを設定して、送られてきたデータを
受け取れるようにする。
var body='';
res2.on((data,(data)=>{
    body += data;
});
res2.on('end',()=>{･･･略･･･})
onを使い'data'イベントでデータを受け取って変数bodyに蓄えていき、
'end'イベントでデータ受信完了後の処理を用意しておく。

XMLのパース処理
'end'イベントで実行しているのは、
XMLデータをパースする(XMLのテキストをもとにXMLオブジェクトを作る)処理。

これは、require('xml2js').parseStringでロードしたparseStringを使って行う。
parseString(XMLのテキスト,コールバック関数);

このparseStringも非同期で実行される関数。
第一引数にXMLのテキストデータを指定し、第二引数にはすべてのパース処理が
完了した後で呼び出すコールバック関数を用意しておく。
コールバック関数では第一引数では、第一引数にエラーに関するオブジェクトが、第二引数には
パースすて作成されたオブジェクトがそれぞれ渡される。
このコールバック関数の中で、res.renderを使ってWebページのレンダリングを実行している。
このときに、parseStringで生成されたオブジェクトから必要な値を取り出して
テンプレート側に渡している。
content:result.rss.channel[0].item

RSSのデータは、非常に複雑な形をしているので、
必要なデータを適格に取り出すためにはRSSの構造をよく理解しておかないといけない。
とりあえずここでは、「result.rss.channel[0].itemというところに、各記事の情報が配列にまとめられて入っている」
ということを覚えて置けばよい。


