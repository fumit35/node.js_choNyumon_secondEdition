p64
1.インターネットにアクセスをする｢http｣というオブジェクトを読み込む。
2.httpから、サーバーのオブジェクトを作る。
3.サーバーオブジェクトを待ち受け状態にする。

require()メソッド
モジュールローディングシステムを利用するもの
オブジェクトをモジュール化して管理し、必要に応じてそれをロードし利用でいるようにしている。
http = require('http');がNode.jsのプログラムのもっとも中心的な機能となる。
Node.jsは「まずhttpをロードする」ことから始まる。

変数 = http.createSever(関数);
サーバーのオブジェクトの作成。
関数は
(request,response) => {
    実行する処理
}
↓同じこと
function(request,response){
    実行処理
}
request,response
クライアントからサーバ、サーバからクライアントへの返信を管理するもの
CreateServerでは必ずこの2つの引数を持った関数を用意する。

サーバに誰かがアクセスしてくると、この関数が呼びだされる。
つまり、ここに処理を用意しておくと、「誰かがサーバーにアクセスしてきたら、
必ずこの処理を実行する」ことができる。

p68
requestとresonse
(request,response)=>{
    response.end('Hello Node.js');
}
↓馴染みのある書き方
function(request,response){
    response.end('Hello Node.js!');
}
引数で渡されたresponseという変数の「end」というメソッドを呼び出している。
responseは、サーバーからクライアントへの返信に関するオブジェクト。
「end」はクライアントへの返信を終了するメソッド。引数にテキストが用意されていると
そのテキストを出力して返信を終える。
response.end('Hello Node.js');というのは「Hello Node.js!」というテキストを、
アクセスしてきたクライアントに返信して終了するという働きをするもの。

http.ClientRequest request引数に入っているオブジェクト。クライアントから送られてきた情報を管理。
http.ServerResponse response引数に入っているオブジェクト。サーバーから送り出される情報を管理。

P70
待ち受け
server.listen(3000);
listenメソッド
オブジェクトは中身がどうなっているか知らなくても使い方がわかればいい。

ヘッダー情報の設定
ちゃんとどういう種類のテキストか書いてあげないといけない
サーバーとクライアントの間でやり取りする際に送られる「見えない」情報。
方法は2つ
1.HTMLの<head>内にタグを用意
2.http.ServerResponseのメソッドを使う
ヘッダー情報を設定する/response.setHeader(名前,値);
ヘッダー情報を得る/変数 = response.getHeader(名前);
ヘッダー情報を出力する/response.writeHead(コード番号,メッセージ);
※コード番号はステータスコード　正常にアクセスしていれば200 

サーバー
↓
表示するコンテンツ
↓
ヘッダー情報
使用言語「日本語」
エンコード「UTF-8」
コンテント「HTML」
↓
クライアント

基本はrequire,createServer,Listen
