var validator = require('express-validator');
app.use(validator());
requireで'express-validator'をロードした後、読み込んだvalidator関数を
app.useで実行するようにする。
これによりバリデーション関係の機能が
リクエスト(res?)などに組み込まれ使える状態になる。

req.check('name','NAMEは必ず入力して下さい。').notEmpty();
req.check('mail','MAILはメールアドレスを記入して下さい。').notEmpty();
req.check('age','AGEは年齢(整数)'を入力下さい。')isInt();

req(リクエスト)の「check」というメソッドを呼び出す。
こればExpress Validatorによって組み込まれたメソッドでチェック内容の
具体的な設定を用意するためのもの。

req.check(項目名,エラーメッセージ)

このcheckは、ExpressValidator.Vallidatorというオブジェクトを
返す。これが、バリデーションのオブジェクト。
その中のバリデーション用のメソッドを呼び出すことで、
バリデーションの内容が設定される。
ここでは、以下のようなものが使われる。
notEmpty:空の入力を禁止
isEmail:メールアドレスのみ受付
isInt:整数のみ受付

ExpressValidator.Validatorオブジェクトそのものを返すようになっているので、
例えば、○○.notEmpty().isEmail()･･･というようにいくつものバリデーション用メソッドを
続けて書いて連続して呼び出すことも可能。メソッドチェーン。

req.get ValidationResult().then(
    (result) => {･･･}    
);
getValidationResultというのがバリデーションの結果を取得するメソッド。
バリデーションは非同期で実行されるため、通常は、そのthenというメソッドに
コールバック関数を設定して、チェック完了時の処理を設定。

コールバック関数の処理
このコールバック関数では、引数resultというものが用意。これは
バリデーションの実行結果に関するオブジェクトが入っている。
まったくバリデーションで引っかからなかった(全て正常)だった場合、
これは空になる。なので、まずはこの内容が空かどうかをチェックし、空でない場合には
フォームを表示する処理を用意する。

if(!result.isEmpty()){･･･}
isEmptyで空かどうかをチェック。これがtrue出ない場合は、resultからバリデーションの結果情報
(要するにエラーの情報)を配列として取り出す。

var result_arr = result.array();

arrayで結果を配列として取り出す。これはオブジェクトの配列になっていて、
中に以下のような項目が用意される。
param:項目名
msg:エラーメッセージ
value:入力された値

繰り返しを使いarray()で得られた配列から順にオブジェクトを取り出して
これらのプロパティを使って処理を行っていけばよい。
ここではエラーメッセージ(msgプロパティ)を変数に取り出してエラーの表示を作成している。

for(var n in result_arr){
    res += '<li>' + result_arr[n].msg + '</li>'
}

後は、作成したresをcontentに設定してrenderすればいいだけ。
これでエラーメッセージが表示される。

フォームへの設定値
renderする際、忘れてはいけないのが「form」にフォームの値を設定しておくということ。
form:req.body

req.bodyというのは、Body.Parserモジュールでフォームの内容が
保存されているところ。
これをそのままformに設定しておけば、そのままそれぞれのフォームの値がテンプレート側でvalueに
設定できるようになる。

//使い方を整理
req.check(項目名,エラーメッセージ).バリデーション用メソッド();

//チェックしたコールバックを設定する
req.getValidationResult().then((result)=>{//チェック後のコールバック関数
if(!result.isEmpty()){
    var result_arr = result.array();
    for(var n in result_arr){//result.arrayを繰り返し処理する
        ･･･result_ar[n]･･･で処理
    }
}
});


check(項目名､エラーメッセージ)
assert
Validate
assertとvalidateはcheckとまったく同じ働きするもの。

これらのメソッドは「入力されたデータ全ての中から、指定の名前のデータを探してチェックする」
という点にある。
フォーム送信だろうが、クエリパラメータだろうが全てチェックする。

checkBody(項目名,エラーメッセージ)
これは、req.bodyの中から指定の名前のデータを探してチェックする。
つまり送信されたフォームの値のみをチェックする。
クエリパラメータなどはチェックしない。

checkParams(項目名,エラーメッセージ)
req.paramsというパラメータの値から指定の名前のデータを探してチェックする。
これは、例えば/hello/123というようにして特定の値を渡すような使い方をした時に
利用される。

checkQuery(項目名,エラーメッセージ)
req.queryという、クエリーテキストの中から指定の名前のデータを探してチェックする。
これは、例えば/hello？id=123というように送られた値をチェック。

通常はcheckを使えば全ての入力をチェックしてくれる。
時には「フォームとクエリパラメータを組み合わせて複雑なデータを送っている」という
こともある。そのときは「これは送信されたフォームのデータだけチェックして欲しい」
ということもある。こうした「特定の入力についてだけチェックする」というときに

サニタイズについて
このExpress Validatorはバリデーション以外の機能も持っている。
ユーザーから入力されたデータをその場で無害化する(HTMLのタグなどを無効化して
HTMLやJavascriptなどが動作しないようにする)処理のこと。

フォームなどを使ったデータの入力では「送られたデータのチェック(検証作業)」no
ほかに「そもそも、これ、画面に表示しても大丈夫な値なの?」ということも考えなければ
いけないことがある。データの中にHTMLタグやJavascriptのコードなどが
含まれていたらそれを画面に表示する際に予想外の動作を引き起こして
しまうかもしれない。

そうした場合への対処法の一つとして、「サニタイズ」という考え方がある。
入力されたら、その場でそのデータを無効化してしまえという考え方。

エスケープ処理を行う
req.sanitize(項目名).escape();

トリミング(前後の余白などを取り除く)処理を行う
req.sanitize(項目名).trim();

サニタイズはreqに追加された「sanitaize」というメソッドを使って行う。
これは引数に項目名を指定して呼び出し、ExpressValidator.Sanitaizerという
オブジェクトを返す。この中の「escape」「trim」といったメソッドを呼び出すことで
具体的な処理を行う。これらを実行すると処理済の値(テキスト)が返される。

サニタイズ用メソッドについて
sanitizeメソッドは入力されたすべてのデータをチェックしますが,
checkメソッドと同様、これも特定の入力に絞ったメソッドが用意されている。

フォーム送信されたデータをサニタイズ
req.sanitaizeBody(項目名)

/○○/○○というようにパラメータで送られたデータをサニタイズ
req.sanitizeParams(項目名)

?○○=xxというようにクエリテキストで送られたデータをサニタイズ
req.sanitizeQuery(項目名)

サニタイズって必要?
Javascriptには、htmlspecialcharsという関数があって、
これを使えばHTMLタグをエスケープ処理したテキストを簡単に用意できる。

またそもそもデータを表示するのに<%= %>を使っている限りHTMLタグは自動的に
エスケープ処理されて表示される。
意図的に<%- %>などで値を出力しない限り、入力された危険なデータがそのまま出力され動作してしまうことは
まずない。
なので、、これは<%= %>を使わず、特殊な形でデータを処理し表示しなければならないような場合に
使うもの。

はまったところ
express-validator
app.useの場所
not functionなどの表示。

それぞれの戻り値
req.check
req.getValidationResult()
resultの結果をconsole.log(result)で状況を見る


